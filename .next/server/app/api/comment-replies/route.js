"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/comment-replies/route";
exports.ids = ["app/api/comment-replies/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcomment-replies%2Froute&page=%2Fapi%2Fcomment-replies%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcomment-replies%2Froute.ts&appDir=%2FUsers%2Fbrandoncullum%2Fcommenter%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandoncullum%2Fcommenter&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcomment-replies%2Froute&page=%2Fapi%2Fcomment-replies%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcomment-replies%2Froute.ts&appDir=%2FUsers%2Fbrandoncullum%2Fcommenter%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandoncullum%2Fcommenter&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_brandoncullum_commenter_app_api_comment_replies_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/comment-replies/route.ts */ \"(rsc)/./app/api/comment-replies/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/comment-replies/route\",\n        pathname: \"/api/comment-replies\",\n        filename: \"route\",\n        bundlePath: \"app/api/comment-replies/route\"\n    },\n    resolvedPagePath: \"/Users/brandoncullum/commenter/app/api/comment-replies/route.ts\",\n    nextConfigOutput,\n    userland: _Users_brandoncullum_commenter_app_api_comment_replies_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/comment-replies/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjb21tZW50LXJlcGxpZXMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmNvbW1lbnQtcmVwbGllcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNvbW1lbnQtcmVwbGllcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmJyYW5kb25jdWxsdW0lMkZjb21tZW50ZXIlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGYnJhbmRvbmN1bGx1bSUyRmNvbW1lbnRlciZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDZTtBQUM1RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3lvdXR1YmUtY29tbWVudHMtYW5hbHl6ZXIvPzk4ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2JyYW5kb25jdWxsdW0vY29tbWVudGVyL2FwcC9hcGkvY29tbWVudC1yZXBsaWVzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jb21tZW50LXJlcGxpZXMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jb21tZW50LXJlcGxpZXNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2NvbW1lbnQtcmVwbGllcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9icmFuZG9uY3VsbHVtL2NvbW1lbnRlci9hcHAvYXBpL2NvbW1lbnQtcmVwbGllcy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvY29tbWVudC1yZXBsaWVzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcomment-replies%2Froute&page=%2Fapi%2Fcomment-replies%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcomment-replies%2Froute.ts&appDir=%2FUsers%2Fbrandoncullum%2Fcommenter%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandoncullum%2Fcommenter&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/comment-replies/route.ts":
/*!******************************************!*\
  !*** ./app/api/comment-replies/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _lib_youtube__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/youtube */ \"(rsc)/./lib/youtube.ts\");\n\n\n\nasync function GET(request) {\n    const searchParams = request.nextUrl.searchParams;\n    const commentId = searchParams.get(\"commentId\");\n    console.log(`🔄 API: Fetching replies for comment ID: ${commentId}`);\n    if (!commentId) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Comment ID is required\"\n        }, {\n            status: 400\n        });\n    }\n    try {\n        // 1. Get this specific parent comment\n        const { data: parentComment, error: parentError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"comments\").select(\"*\").eq(\"comment_id\", commentId).single();\n        if (parentError || !parentComment) {\n            console.error(\"❌ Parent comment not found:\", commentId);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Parent comment not found\",\n                replies: [],\n                count: 0\n            }, {\n                status: 404\n            });\n        }\n        console.log(`✅ Found parent comment: ${parentComment.comment_id}`);\n        // 2. Fetch all replies for this comment\n        const { data: replies, error: repliesError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"comments\").select(\"*\").eq(\"parent_id\", commentId).order(\"published_at\", {\n            ascending: true\n        });\n        if (repliesError) {\n            console.error(\"❌ Error fetching replies:\", repliesError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: repliesError.message\n            }, {\n                status: 500\n            });\n        }\n        console.log(`📊 Found ${replies?.length || 0} replies for comment ${commentId}`);\n        // Log the first few replies to help debug\n        if (replies && replies.length > 0) {\n            replies.slice(0, 3).forEach((reply, i)=>{\n                console.log(`Reply ${i + 1}: ID=${reply.comment_id}, Parent=${reply.parent_id}, Text=${reply.text.substring(0, 50)}...`);\n            });\n        }\n        // Transform the comments to frontend format\n        const formattedReplies = replies?.map(_lib_youtube__WEBPACK_IMPORTED_MODULE_2__.mapDbCommentToCommentData) || [];\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            replies: formattedReplies,\n            count: formattedReplies.length\n        });\n    } catch (error) {\n        console.error(\"❌ Server error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2NvbW1lbnQtcmVwbGllcy9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEO0FBQ2Q7QUFDZ0I7QUFFbkQsZUFBZUcsSUFBSUMsT0FBb0I7SUFDNUMsTUFBTUMsZUFBZUQsUUFBUUUsT0FBTyxDQUFDRCxZQUFZO0lBQ2pELE1BQU1FLFlBQVlGLGFBQWFHLEdBQUcsQ0FBQztJQUVuQ0MsUUFBUUMsR0FBRyxDQUFDLENBQUMseUNBQXlDLEVBQUVILFVBQVUsQ0FBQztJQUVuRSxJQUFJLENBQUNBLFdBQVc7UUFDZCxPQUFPUCxxREFBWUEsQ0FBQ1csSUFBSSxDQUFDO1lBQUVDLE9BQU87UUFBeUIsR0FBRztZQUFFQyxRQUFRO1FBQUk7SUFDOUU7SUFFQSxJQUFJO1FBQ0Ysc0NBQXNDO1FBQ3RDLE1BQU0sRUFBRUMsTUFBTUMsYUFBYSxFQUFFSCxPQUFPSSxXQUFXLEVBQUUsR0FBRyxNQUFNZixtREFBUUEsQ0FDL0RnQixJQUFJLENBQUMsWUFDTEMsTUFBTSxDQUFDLEtBQ1BDLEVBQUUsQ0FBQyxjQUFjWixXQUNqQmEsTUFBTTtRQUVULElBQUlKLGVBQWUsQ0FBQ0QsZUFBZTtZQUNqQ04sUUFBUUcsS0FBSyxDQUFDLCtCQUErQkw7WUFDN0MsT0FBT1AscURBQVlBLENBQUNXLElBQUksQ0FBQztnQkFDdkJDLE9BQU87Z0JBQ1BTLFNBQVMsRUFBRTtnQkFDWEMsT0FBTztZQUNULEdBQUc7Z0JBQUVULFFBQVE7WUFBSTtRQUNuQjtRQUVBSixRQUFRQyxHQUFHLENBQUMsQ0FBQyx3QkFBd0IsRUFBRUssY0FBY1EsVUFBVSxDQUFDLENBQUM7UUFFakUsd0NBQXdDO1FBQ3hDLE1BQU0sRUFBRVQsTUFBTU8sT0FBTyxFQUFFVCxPQUFPWSxZQUFZLEVBQUUsR0FBRyxNQUFNdkIsbURBQVFBLENBQzFEZ0IsSUFBSSxDQUFDLFlBQ0xDLE1BQU0sQ0FBQyxLQUNQQyxFQUFFLENBQUMsYUFBYVosV0FDaEJrQixLQUFLLENBQUMsZ0JBQWdCO1lBQUVDLFdBQVc7UUFBSztRQUUzQyxJQUFJRixjQUFjO1lBQ2hCZixRQUFRRyxLQUFLLENBQUMsNkJBQTZCWTtZQUMzQyxPQUFPeEIscURBQVlBLENBQUNXLElBQUksQ0FBQztnQkFBRUMsT0FBT1ksYUFBYUcsT0FBTztZQUFDLEdBQUc7Z0JBQUVkLFFBQVE7WUFBSTtRQUMxRTtRQUVBSixRQUFRQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUVXLFNBQVNPLFVBQVUsRUFBRSxxQkFBcUIsRUFBRXJCLFVBQVUsQ0FBQztRQUUvRSwwQ0FBMEM7UUFDMUMsSUFBSWMsV0FBV0EsUUFBUU8sTUFBTSxHQUFHLEdBQUc7WUFDakNQLFFBQVFRLEtBQUssQ0FBQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPQztnQkFDbEN2QixRQUFRQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUVzQixJQUFFLEVBQUUsS0FBSyxFQUFFRCxNQUFNUixVQUFVLENBQUMsU0FBUyxFQUFFUSxNQUFNRSxTQUFTLENBQUMsT0FBTyxFQUFFRixNQUFNRyxJQUFJLENBQUNDLFNBQVMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDO1lBQ3ZIO1FBQ0Y7UUFFQSw0Q0FBNEM7UUFDNUMsTUFBTUMsbUJBQW1CZixTQUFTZ0IsSUFBSW5DLG1FQUF5QkEsS0FBSyxFQUFFO1FBRXRFLE9BQU9GLHFEQUFZQSxDQUFDVyxJQUFJLENBQUM7WUFDdkJVLFNBQVNlO1lBQ1RkLE9BQU9jLGlCQUFpQlIsTUFBTTtRQUNoQztJQUNGLEVBQUUsT0FBT2hCLE9BQU87UUFDZEgsUUFBUUcsS0FBSyxDQUFDLG1CQUFtQkE7UUFDakMsT0FBT1oscURBQVlBLENBQUNXLElBQUksQ0FBQztZQUFFQyxPQUFPO1FBQXdCLEdBQUc7WUFBRUMsUUFBUTtRQUFJO0lBQzdFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95b3V0dWJlLWNvbW1lbnRzLWFuYWx5emVyLy4vYXBwL2FwaS9jb21tZW50LXJlcGxpZXMvcm91dGUudHM/MjdkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tICdAL2xpYi9zdXBhYmFzZSc7XG5pbXBvcnQgeyBtYXBEYkNvbW1lbnRUb0NvbW1lbnREYXRhIH0gZnJvbSAnQC9saWIveW91dHViZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gcmVxdWVzdC5uZXh0VXJsLnNlYXJjaFBhcmFtcztcbiAgY29uc3QgY29tbWVudElkID0gc2VhcmNoUGFyYW1zLmdldCgnY29tbWVudElkJyk7XG4gIFxuICBjb25zb2xlLmxvZyhg8J+UhCBBUEk6IEZldGNoaW5nIHJlcGxpZXMgZm9yIGNvbW1lbnQgSUQ6ICR7Y29tbWVudElkfWApO1xuICBcbiAgaWYgKCFjb21tZW50SWQpIHtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0NvbW1lbnQgSUQgaXMgcmVxdWlyZWQnIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gIH1cbiAgXG4gIHRyeSB7XG4gICAgLy8gMS4gR2V0IHRoaXMgc3BlY2lmaWMgcGFyZW50IGNvbW1lbnRcbiAgICBjb25zdCB7IGRhdGE6IHBhcmVudENvbW1lbnQsIGVycm9yOiBwYXJlbnRFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdjb21tZW50cycpXG4gICAgICAuc2VsZWN0KCcqJylcbiAgICAgIC5lcSgnY29tbWVudF9pZCcsIGNvbW1lbnRJZClcbiAgICAgIC5zaW5nbGUoKTtcbiAgICBcbiAgICBpZiAocGFyZW50RXJyb3IgfHwgIXBhcmVudENvbW1lbnQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBQYXJlbnQgY29tbWVudCBub3QgZm91bmQ6JywgY29tbWVudElkKTtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IFxuICAgICAgICBlcnJvcjogJ1BhcmVudCBjb21tZW50IG5vdCBmb3VuZCcsIFxuICAgICAgICByZXBsaWVzOiBbXSxcbiAgICAgICAgY291bnQ6IDBcbiAgICAgIH0sIHsgc3RhdHVzOiA0MDQgfSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGDinIUgRm91bmQgcGFyZW50IGNvbW1lbnQ6ICR7cGFyZW50Q29tbWVudC5jb21tZW50X2lkfWApO1xuICAgIFxuICAgIC8vIDIuIEZldGNoIGFsbCByZXBsaWVzIGZvciB0aGlzIGNvbW1lbnRcbiAgICBjb25zdCB7IGRhdGE6IHJlcGxpZXMsIGVycm9yOiByZXBsaWVzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgnY29tbWVudHMnKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuZXEoJ3BhcmVudF9pZCcsIGNvbW1lbnRJZClcbiAgICAgIC5vcmRlcigncHVibGlzaGVkX2F0JywgeyBhc2NlbmRpbmc6IHRydWUgfSk7XG4gICAgXG4gICAgaWYgKHJlcGxpZXNFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGZldGNoaW5nIHJlcGxpZXM6JywgcmVwbGllc0Vycm9yKTtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiByZXBsaWVzRXJyb3IubWVzc2FnZSB9LCB7IHN0YXR1czogNTAwIH0pO1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZyhg8J+TiiBGb3VuZCAke3JlcGxpZXM/Lmxlbmd0aCB8fCAwfSByZXBsaWVzIGZvciBjb21tZW50ICR7Y29tbWVudElkfWApO1xuICAgIFxuICAgIC8vIExvZyB0aGUgZmlyc3QgZmV3IHJlcGxpZXMgdG8gaGVscCBkZWJ1Z1xuICAgIGlmIChyZXBsaWVzICYmIHJlcGxpZXMubGVuZ3RoID4gMCkge1xuICAgICAgcmVwbGllcy5zbGljZSgwLCAzKS5mb3JFYWNoKChyZXBseSwgaSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgUmVwbHkgJHtpKzF9OiBJRD0ke3JlcGx5LmNvbW1lbnRfaWR9LCBQYXJlbnQ9JHtyZXBseS5wYXJlbnRfaWR9LCBUZXh0PSR7cmVwbHkudGV4dC5zdWJzdHJpbmcoMCwgNTApfS4uLmApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFRyYW5zZm9ybSB0aGUgY29tbWVudHMgdG8gZnJvbnRlbmQgZm9ybWF0XG4gICAgY29uc3QgZm9ybWF0dGVkUmVwbGllcyA9IHJlcGxpZXM/Lm1hcChtYXBEYkNvbW1lbnRUb0NvbW1lbnREYXRhKSB8fCBbXTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBcbiAgICAgIHJlcGxpZXM6IGZvcm1hdHRlZFJlcGxpZXMsXG4gICAgICBjb3VudDogZm9ybWF0dGVkUmVwbGllcy5sZW5ndGhcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgU2VydmVyIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufSAiXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwic3VwYWJhc2UiLCJtYXBEYkNvbW1lbnRUb0NvbW1lbnREYXRhIiwiR0VUIiwicmVxdWVzdCIsInNlYXJjaFBhcmFtcyIsIm5leHRVcmwiLCJjb21tZW50SWQiLCJnZXQiLCJjb25zb2xlIiwibG9nIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiZGF0YSIsInBhcmVudENvbW1lbnQiLCJwYXJlbnRFcnJvciIsImZyb20iLCJzZWxlY3QiLCJlcSIsInNpbmdsZSIsInJlcGxpZXMiLCJjb3VudCIsImNvbW1lbnRfaWQiLCJyZXBsaWVzRXJyb3IiLCJvcmRlciIsImFzY2VuZGluZyIsIm1lc3NhZ2UiLCJsZW5ndGgiLCJzbGljZSIsImZvckVhY2giLCJyZXBseSIsImkiLCJwYXJlbnRfaWQiLCJ0ZXh0Iiwic3Vic3RyaW5nIiwiZm9ybWF0dGVkUmVwbGllcyIsIm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/comment-replies/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://frcxgsqnkkmelonjxgpb.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZyY3hnc3Fua2ttZWxvbmp4Z3BiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA2NjYyMTIsImV4cCI6MjA1NjI0MjIxMn0.R51t6tUwsRW2gcu8gxmgbw20sm2sWm25S9lvDWVoyuM\";\n// Check if the environment variables are set\nif (!supabaseUrl || !supabaseAnonKey) {\n    console.error(\"Missing Supabase environment variables. Check your .env.local file.\");\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl || \"\", supabaseAnonKey || \"\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFFcEQsTUFBTUMsY0FBY0MsMENBQW9DO0FBQ3hELE1BQU1HLGtCQUFrQkgsa05BQXlDO0FBRWpFLDZDQUE2QztBQUM3QyxJQUFJLENBQUNELGVBQWUsQ0FBQ0ksaUJBQWlCO0lBQ3BDRSxRQUFRQyxLQUFLLENBQUM7QUFDaEI7QUFFTyxNQUFNQyxXQUFXVCxtRUFBWUEsQ0FDbENDLGVBQWUsSUFDZkksbUJBQW1CLElBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veW91dHViZS1jb21tZW50cy1hbmFseXplci8uL2xpYi9zdXBhYmFzZS50cz9jOTlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcblxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkw7XG5jb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWTtcblxuLy8gQ2hlY2sgaWYgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgc2V0XG5pZiAoIXN1cGFiYXNlVXJsIHx8ICFzdXBhYmFzZUFub25LZXkpIHtcbiAgY29uc29sZS5lcnJvcignTWlzc2luZyBTdXBhYmFzZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIENoZWNrIHlvdXIgLmVudi5sb2NhbCBmaWxlLicpO1xufVxuXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoXG4gIHN1cGFiYXNlVXJsIHx8ICcnLFxuICBzdXBhYmFzZUFub25LZXkgfHwgJydcbilcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJzdXBhYmFzZUFub25LZXkiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsImNvbnNvbGUiLCJlcnJvciIsInN1cGFiYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cn: () => (/* binding */ cn),\n/* harmony export */   createMarkup: () => (/* binding */ createMarkup),\n/* harmony export */   decodeAllHtmlEntities: () => (/* binding */ decodeAllHtmlEntities),\n/* harmony export */   decodeHtmlEntities: () => (/* binding */ decodeHtmlEntities)\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(rsc)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tailwind-merge */ \"(rsc)/./node_modules/tailwind-merge/dist/lib/tw-merge.mjs\");\n/* harmony import */ var he__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! he */ \"(rsc)/./node_modules/he/he.js\");\n/* harmony import */ var he__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(he__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction cn(...inputs) {\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_2__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\n/**\n * Creates a safe markup object for dangerouslySetInnerHTML\n */ function createMarkup(html) {\n    // Use DOMPurify if available (client-side)\n    if (typeof DOMPurify !== \"undefined\") {\n        return {\n            __html: DOMPurify.sanitize(html || \"\", {\n                ALLOWED_TAGS: [\n                    \"b\",\n                    \"i\",\n                    \"em\",\n                    \"strong\",\n                    \"a\",\n                    \"br\",\n                    \"p\"\n                ],\n                ALLOWED_ATTR: [\n                    \"href\",\n                    \"target\",\n                    \"rel\"\n                ]\n            })\n        };\n    }\n    // Basic server-side fallback\n    return {\n        __html: html || \"\"\n    };\n}\n/**\n * Decodes HTML entities in text returned from YouTube API\n * e.g. \"I&#39;ve\" becomes \"I've\"\n */ function decodeHtmlEntities(text) {\n    if (!text) return \"\";\n    return he__WEBPACK_IMPORTED_MODULE_1___default().decode(text);\n}\n/**\n * More thorough HTML entity decoding that also handles special cases\n */ function decodeAllHtmlEntities(text) {\n    if (!text) return \"\";\n    // First use the he library for standard entities\n    const decoded = he__WEBPACK_IMPORTED_MODULE_1___default().decode(text);\n    // Then handle any special cases that might not be covered\n    return decoded.replace(/&amp;/g, \"&\").replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\").replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\").replace(/&#x27;/g, \"'\").replace(/&#x2F;/g, \"/\").replace(/&#x60;/g, \"`\").replace(/&#x3D;/g, \"=\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBNkM7QUFDSjtBQUNyQjtBQUViLFNBQVNHLEdBQUcsR0FBR0MsTUFBb0I7SUFDeEMsT0FBT0gsdURBQU9BLENBQUNELDBDQUFJQSxDQUFDSTtBQUN0QjtBQUVBOztDQUVDLEdBQ00sU0FBU0MsYUFBYUMsSUFBWTtJQUN2QywyQ0FBMkM7SUFDM0MsSUFBSSxPQUFPQyxjQUFjLGFBQWE7UUFDcEMsT0FBTztZQUNMQyxRQUFRRCxVQUFVRSxRQUFRLENBQUNILFFBQVEsSUFBSTtnQkFDckNJLGNBQWM7b0JBQUM7b0JBQUs7b0JBQUs7b0JBQU07b0JBQVU7b0JBQUs7b0JBQU07aUJBQUk7Z0JBQ3hEQyxjQUFjO29CQUFDO29CQUFRO29CQUFVO2lCQUFNO1lBQ3pDO1FBQ0Y7SUFDRjtJQUVBLDZCQUE2QjtJQUM3QixPQUFPO1FBQUVILFFBQVFGLFFBQVE7SUFBRztBQUM5QjtBQUVBOzs7Q0FHQyxHQUNNLFNBQVNNLG1CQUFtQkMsSUFBWTtJQUM3QyxJQUFJLENBQUNBLE1BQU0sT0FBTztJQUNsQixPQUFPWCxnREFBUyxDQUFDVztBQUNuQjtBQUVBOztDQUVDLEdBQ00sU0FBU0Usc0JBQXNCRixJQUFZO0lBQ2hELElBQUksQ0FBQ0EsTUFBTSxPQUFPO0lBRWxCLGlEQUFpRDtJQUNqRCxNQUFNRyxVQUFVZCxnREFBUyxDQUFDVztJQUUxQiwwREFBMEQ7SUFDMUQsT0FBT0csUUFDSkMsT0FBTyxDQUFDLFVBQVUsS0FDbEJBLE9BQU8sQ0FBQyxTQUFTLEtBQ2pCQSxPQUFPLENBQUMsU0FBUyxLQUNqQkEsT0FBTyxDQUFDLFdBQVcsS0FDbkJBLE9BQU8sQ0FBQyxVQUFVLEtBQ2xCQSxPQUFPLENBQUMsV0FBVyxLQUNuQkEsT0FBTyxDQUFDLFdBQVcsS0FDbkJBLE9BQU8sQ0FBQyxXQUFXLEtBQ25CQSxPQUFPLENBQUMsV0FBVztBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3lvdXR1YmUtY29tbWVudHMtYW5hbHl6ZXIvLi9saWIvdXRpbHMudHM/Zjc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIENsYXNzVmFsdWUsIGNsc3ggfSBmcm9tIFwiY2xzeFwiO1xuaW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiO1xuaW1wb3J0IGhlIGZyb20gJ2hlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNuKC4uLmlucHV0czogQ2xhc3NWYWx1ZVtdKSB7XG4gIHJldHVybiB0d01lcmdlKGNsc3goaW5wdXRzKSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNhZmUgbWFya3VwIG9iamVjdCBmb3IgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1hcmt1cChodG1sOiBzdHJpbmcpIHtcbiAgLy8gVXNlIERPTVB1cmlmeSBpZiBhdmFpbGFibGUgKGNsaWVudC1zaWRlKVxuICBpZiAodHlwZW9mIERPTVB1cmlmeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4geyBcbiAgICAgIF9faHRtbDogRE9NUHVyaWZ5LnNhbml0aXplKGh0bWwgfHwgJycsIHtcbiAgICAgICAgQUxMT1dFRF9UQUdTOiBbJ2InLCAnaScsICdlbScsICdzdHJvbmcnLCAnYScsICdicicsICdwJ10sXG4gICAgICAgIEFMTE9XRURfQVRUUjogWydocmVmJywgJ3RhcmdldCcsICdyZWwnXVxuICAgICAgfSkgXG4gICAgfTtcbiAgfVxuICBcbiAgLy8gQmFzaWMgc2VydmVyLXNpZGUgZmFsbGJhY2tcbiAgcmV0dXJuIHsgX19odG1sOiBodG1sIHx8ICcnIH07XG59XG5cbi8qKlxuICogRGVjb2RlcyBIVE1MIGVudGl0aWVzIGluIHRleHQgcmV0dXJuZWQgZnJvbSBZb3VUdWJlIEFQSVxuICogZS5nLiBcIkkmIzM5O3ZlXCIgYmVjb21lcyBcIkkndmVcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlSHRtbEVudGl0aWVzKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICghdGV4dCkgcmV0dXJuICcnO1xuICByZXR1cm4gaGUuZGVjb2RlKHRleHQpO1xufVxuXG4vKipcbiAqIE1vcmUgdGhvcm91Z2ggSFRNTCBlbnRpdHkgZGVjb2RpbmcgdGhhdCBhbHNvIGhhbmRsZXMgc3BlY2lhbCBjYXNlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQWxsSHRtbEVudGl0aWVzKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICghdGV4dCkgcmV0dXJuICcnO1xuICBcbiAgLy8gRmlyc3QgdXNlIHRoZSBoZSBsaWJyYXJ5IGZvciBzdGFuZGFyZCBlbnRpdGllc1xuICBjb25zdCBkZWNvZGVkID0gaGUuZGVjb2RlKHRleHQpO1xuICBcbiAgLy8gVGhlbiBoYW5kbGUgYW55IHNwZWNpYWwgY2FzZXMgdGhhdCBtaWdodCBub3QgYmUgY292ZXJlZFxuICByZXR1cm4gZGVjb2RlZFxuICAgIC5yZXBsYWNlKC8mYW1wOy9nLCAnJicpXG4gICAgLnJlcGxhY2UoLyZsdDsvZywgJzwnKVxuICAgIC5yZXBsYWNlKC8mZ3Q7L2csICc+JylcbiAgICAucmVwbGFjZSgvJnF1b3Q7L2csICdcIicpXG4gICAgLnJlcGxhY2UoLyYjMzk7L2csIFwiJ1wiKVxuICAgIC5yZXBsYWNlKC8mI3gyNzsvZywgXCInXCIpXG4gICAgLnJlcGxhY2UoLyYjeDJGOy9nLCAnLycpXG4gICAgLnJlcGxhY2UoLyYjeDYwOy9nLCAnYCcpXG4gICAgLnJlcGxhY2UoLyYjeDNEOy9nLCAnPScpO1xufSAiXSwibmFtZXMiOlsiY2xzeCIsInR3TWVyZ2UiLCJoZSIsImNuIiwiaW5wdXRzIiwiY3JlYXRlTWFya3VwIiwiaHRtbCIsIkRPTVB1cmlmeSIsIl9faHRtbCIsInNhbml0aXplIiwiQUxMT1dFRF9UQUdTIiwiQUxMT1dFRF9BVFRSIiwiZGVjb2RlSHRtbEVudGl0aWVzIiwidGV4dCIsImRlY29kZSIsImRlY29kZUFsbEh0bWxFbnRpdGllcyIsImRlY29kZWQiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils.ts\n");

/***/ }),

/***/ "(rsc)/./lib/youtube.ts":
/*!************************!*\
  !*** ./lib/youtube.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchAllVideosByChannel: () => (/* binding */ fetchAllVideosByChannel),\n/* harmony export */   fetchComments: () => (/* binding */ fetchComments),\n/* harmony export */   fetchLatestChannelComments: () => (/* binding */ fetchLatestChannelComments),\n/* harmony export */   fetchVideosByChannel: () => (/* binding */ fetchVideosByChannel),\n/* harmony export */   getChannelVideos: () => (/* binding */ getChannelVideos),\n/* harmony export */   getCommentReplies: () => (/* binding */ getCommentReplies),\n/* harmony export */   getCommentThreads: () => (/* binding */ getCommentThreads),\n/* harmony export */   getCommentsForVideo: () => (/* binding */ getCommentsForVideo),\n/* harmony export */   mapDbCommentToCommentData: () => (/* binding */ mapDbCommentToCommentData),\n/* harmony export */   mapYouTubeCommentToDbComment: () => (/* binding */ mapYouTubeCommentToDbComment),\n/* harmony export */   searchForChannel: () => (/* binding */ searchForChannel),\n/* harmony export */   updateCommentReplyCounts: () => (/* binding */ updateCommentReplyCounts)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(rsc)/./lib/utils.ts\");\n\n\n/**\n * YouTube API integration for fetching channel data and comments\n * Based on the YouTube Data API v3 documentation: \n * https://developers.google.com/youtube/v3/docs\n */ /**\n * Searches for a YouTube channel by name\n * @param channelName The name of the channel to search for\n * @param apiKey YouTube API key\n * @returns The channel ID\n */ async function searchForChannel(channelName, apiKey) {\n    const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(channelName)}&type=channel&key=${apiKey}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if (!data.items || data.items.length === 0) {\n        throw new Error(\"Channel not found\");\n    }\n    return data.items[0].id.channelId;\n}\n/**\n * Fetches videos for a YouTube channel\n */ async function fetchVideosByChannel(channelId, apiKey, maxResults = 50, pageToken) {\n    const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${channelId}&maxResults=${maxResults}&order=date&type=video&key=${apiKey}${pageToken ? `&pageToken=${pageToken}` : \"\"}`;\n    const response = await fetch(url);\n    return await response.json();\n}\n/**\n * Fetches all videos for a YouTube channel with pagination\n */ async function fetchAllVideosByChannel(channelId, apiKey) {\n    let allVideos = [];\n    let nextPageToken;\n    do {\n        console.log(`Fetching videos for channel ${channelId}${nextPageToken ? ` (page token: ${nextPageToken})` : \"\"}`);\n        const response = await fetchVideosByChannel(channelId, apiKey, 50, nextPageToken);\n        allVideos = [\n            ...allVideos,\n            ...response.items || []\n        ];\n        nextPageToken = response.nextPageToken;\n        // Add a small delay to avoid API rate limits\n        if (nextPageToken) {\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n        }\n    }while (nextPageToken);\n    return allVideos;\n}\n/**\n * Fetches comments for a specific video\n */ async function fetchComments(videoId, apiKey, pageToken) {\n    try {\n        const url = `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet,replies&videoId=${videoId}&maxResults=100&key=${apiKey}${pageToken ? `&pageToken=${pageToken}` : \"\"}`;\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch comments: ${response.statusText}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n        throw error;\n    }\n}\n/**\n * Fetches the latest comments from a YouTube channel\n */ async function fetchLatestChannelComments(channelId, apiKey, maxVideos = 10, includeOldVideos = false, maxComments = 1000, includeReplies = true) {\n    // Fetch videos first\n    let videosResponse = await fetchVideosByChannel(channelId, apiKey);\n    let processedVideos = videosResponse.items || [];\n    // If we should include older videos beyond the first page\n    if (includeOldVideos && videosResponse.nextPageToken) {\n        const allVideos = await fetchAllVideosByChannel(channelId, apiKey);\n        processedVideos = allVideos;\n        // Limit to most recent videos\n        if (maxVideos !== -1) {\n            processedVideos = processedVideos.slice(0, maxVideos);\n        }\n    }\n    // Process each video to get comments\n    const allComments = [];\n    let fetchedCommentCount = 0;\n    for (const video of processedVideos){\n        // Skip if we've reached max comments\n        if (maxComments !== -1 && fetchedCommentCount >= maxComments) {\n            break;\n        }\n        try {\n            // Fix: Ensure videoId is properly accessed\n            const videoId = video.id?.videoId;\n            if (!videoId) {\n                console.warn(\"Missing videoId for video:\", video);\n                continue;\n            }\n            const commentsResponse = await fetchComments(videoId, apiKey);\n            // Process only top-level comments to start\n            const videoComments = commentsResponse.items || [];\n            for (const commentThread of videoComments){\n                if (!commentThread?.snippet?.topLevelComment?.snippet) {\n                    console.warn(\"Malformed comment thread:\", commentThread);\n                    continue;\n                }\n                const snippet = commentThread.snippet.topLevelComment.snippet;\n                // Add to our list\n                allComments.push({\n                    id: commentThread.id,\n                    videoId: videoId,\n                    videoTitle: video.snippet?.title || \"Unknown Video\",\n                    authorName: snippet.authorDisplayName,\n                    authorProfileUrl: snippet.authorProfileImageUrl,\n                    text: snippet.textDisplay,\n                    likeCount: snippet.likeCount,\n                    publishedAt: snippet.publishedAt,\n                    updatedAt: snippet.updatedAt || snippet.publishedAt,\n                    totalReplyCount: commentThread.snippet.totalReplyCount || 0,\n                    replies: [] // Initialize empty array for replies\n                });\n                fetchedCommentCount++;\n                // Add replies if there are any and we want them\n                if (includeReplies && commentThread.replies?.comments) {\n                    for (const reply of commentThread.replies.comments){\n                        if (!reply?.snippet) {\n                            console.warn(\"Malformed reply:\", reply);\n                            continue;\n                        }\n                        allComments.push({\n                            id: reply.id,\n                            videoId: videoId,\n                            videoTitle: video.snippet?.title || \"Unknown Video\",\n                            authorName: reply.snippet.authorDisplayName,\n                            authorProfileUrl: reply.snippet.authorProfileImageUrl,\n                            text: reply.snippet.textDisplay,\n                            likeCount: reply.snippet.likeCount || 0,\n                            publishedAt: reply.snippet.publishedAt,\n                            updatedAt: reply.snippet.updatedAt || reply.snippet.publishedAt,\n                            totalReplyCount: 0,\n                            parentId: commentThread.id,\n                            replies: []\n                        });\n                        fetchedCommentCount++;\n                    }\n                }\n                // Check if we've reached the max\n                if (maxComments !== -1 && fetchedCommentCount >= maxComments) {\n                    break;\n                }\n            }\n        } catch (error) {\n            // Just log and continue with next video\n            console.error(`Error fetching comments for video ${video.id?.videoId}:`, error);\n        }\n    }\n    return allComments;\n}\n/**\n * Get YouTube comments for a video\n */ async function getCommentsForVideo(videoId, apiKey, maxComments = -1, includeReplies = true) {\n    console.log(`Getting comments for video ${videoId}, including replies: ${includeReplies}`);\n    let comments = []; // Using Record<string, any> for flexibility\n    let nextPageToken;\n    let commentCount = 0;\n    do {\n        console.log(`Fetching comments page ${commentCount > 0 ? commentCount / 20 + 1 : 1}`);\n        const response = await fetchComments(videoId, apiKey, nextPageToken);\n        const videoComments = response.items || [];\n        // Process each top-level comment\n        for (const comment of videoComments){\n            comments.push(comment);\n            commentCount++;\n            // Process replies if available and requested\n            if (includeReplies && comment.replies?.comments) {\n                console.log(`Found ${comment.replies.comments.length} replies for comment ${comment.id}`);\n                for (const reply of comment.replies.comments){\n                    // Ensure the reply has a properly formatted parent_id\n                    const replyComment = {\n                        ...reply,\n                        snippet: {\n                            ...reply.snippet,\n                            parentId: comment.id,\n                            videoId: videoId // Ensure videoId is included\n                        }\n                    };\n                    comments.push(replyComment);\n                    commentCount++;\n                }\n            }\n        }\n        nextPageToken = response.nextPageToken;\n        // Continue until we've reached max comments or run out of pages\n        if (maxComments !== -1 && commentCount >= maxComments) {\n            console.log(`Reached maximum of ${maxComments} comments`);\n            break;\n        }\n        // Small delay to avoid rate limiting\n        if (nextPageToken) {\n            await new Promise((resolve)=>setTimeout(resolve, 300));\n        }\n    }while (nextPageToken);\n    console.log(`Retrieved ${comments.length} comments total`);\n    return comments;\n}\n// Updated mapYouTubeCommentToDbComment function with more robust type checking\nfunction mapYouTubeCommentToDbComment(comment, channelId) {\n    // Very explicitly extract parentId from all possible locations\n    let parentId = null;\n    // First check if it's in snippet.parentId\n    if (comment.snippet?.parentId) {\n        parentId = comment.snippet.parentId;\n        console.log(`Found parentId in snippet.parentId: ${parentId}`);\n    } else if (comment.snippet?.topLevelComment?.id && comment.id !== comment.snippet.topLevelComment.id) {\n        parentId = comment.snippet.topLevelComment.id;\n        console.log(`Found parentId from topLevelComment: ${parentId}`);\n    }\n    // If this is a direct API reply, it might be structured differently\n    if (comment.snippet?.type === \"reply\" && comment.snippet?.parentId) {\n        parentId = comment.snippet.parentId;\n        console.log(`Found parentId from reply type: ${parentId}`);\n    }\n    // Log mapping for debugging\n    console.log(`Mapping comment ${comment.id}, parentId: ${parentId || \"NONE (top-level)\"}`);\n    // Ensure we have proper access to all required properties\n    const topLevelSnippet = comment.snippet?.topLevelComment?.snippet;\n    const directSnippet = comment.snippet;\n    return {\n        comment_id: comment.id,\n        video_id: directSnippet?.videoId,\n        author_name: topLevelSnippet?.authorDisplayName || directSnippet?.authorDisplayName,\n        author_profile_url: topLevelSnippet?.authorProfileImageUrl || directSnippet?.authorProfileImageUrl,\n        text: topLevelSnippet?.textDisplay || directSnippet?.textDisplay,\n        like_count: topLevelSnippet?.likeCount || directSnippet?.likeCount || 0,\n        published_at: topLevelSnippet?.publishedAt || directSnippet?.publishedAt,\n        channel_id: channelId,\n        is_owner_comment: false,\n        parent_id: parentId,\n        video_title: directSnippet?.videoTitle || \"\"\n    };\n}\n// Enhanced mapping function that handles all possible properties\nfunction mapDbCommentToCommentData(dbComment) {\n    return {\n        id: dbComment.comment_id,\n        authorDisplayName: dbComment.author_name || \"Unknown User\",\n        authorProfileImageUrl: dbComment.author_profile_url || \"https://www.gravatar.com/avatar/?d=mp\",\n        textDisplay: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.decodeAllHtmlEntities)(dbComment.text || \"\"),\n        likeCount: dbComment.like_count || 0,\n        publishedAt: dbComment.published_at,\n        updatedAt: dbComment.updated_at || dbComment.published_at,\n        videoId: dbComment.video_id,\n        videoTitle: dbComment.video_title || \"\",\n        replyCount: dbComment.reply_count || 0,\n        isHeartedByCreator: false,\n        isPinned: false,\n        parentId: dbComment.parent_id,\n        replies: [] // Will be populated separately if needed\n    };\n}\n// Debug function to inspect parent-child relationships in the database\nfunction logAllParentChildRelationships() {\n    return _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"comment_id, parent_id\").not(\"parent_id\", \"is\", null).limit(20).then(({ data, error })=>{\n        console.log(\"\\uD83D\\uDD0D PARENT-CHILD DEBUG - Sample comments with parents:\", data);\n        console.log(\"Error if any:\", error);\n        return data;\n    });\n}\n// Modified getCommentReplies function to fix reply lookup\nasync function getCommentReplies(commentId) {\n    try {\n        console.log(\"\\uD83D\\uDD0D getCommentReplies - Looking for replies to commentId:\", commentId);\n        // First, check if any comments in the database have parent_id matching our commentId\n        const { data: replyCheck, error: replyCheckError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"count(*)\").eq(\"parent_id\", commentId).single();\n        console.log(\"\\uD83D\\uDCCA getCommentReplies - Reply check result:\", replyCheck);\n        if (replyCheckError) {\n            console.error(\"❌ Reply check error:\", replyCheckError);\n        }\n        // Check the actual comment we're looking for replies to\n        const { data: parentComment, error: parentError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\").eq(\"comment_id\", commentId).single();\n        if (parentComment) {\n            console.log(\"✅ Found parent comment:\", {\n                id: parentComment.id,\n                comment_id: parentComment.comment_id,\n                video_id: parentComment.video_id,\n                text: parentComment.text?.substring(0, 50) + \"...\" || 0\n            });\n        } else {\n            console.log(\"⚠️ Parent comment not found for ID:\", commentId);\n        }\n        // Search for replies directly \n        const { data: replies, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\").eq(\"parent_id\", commentId) // This assumes parent_id references comment_id \n        .order(\"published_at\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"❌ Error fetching replies:\", error);\n            return [];\n        }\n        console.log(`📊 Found ${replies?.length || 0} replies for comment:`, commentId);\n        if (replies && replies.length > 0) {\n            // Sample the first reply\n            console.log(\"\\uD83D\\uDD0D First reply sample:\", {\n                id: replies[0].id,\n                comment_id: replies[0].comment_id,\n                parent_id: replies[0].parent_id,\n                video_id: replies[0].video_id,\n                text: replies[0].text?.substring(0, 50) + \"...\" || 0\n            });\n        }\n        // Map to the expected format\n        const replyData = replies?.map((reply)=>mapDbCommentToCommentData(reply)) || [];\n        return replyData;\n    } catch (error) {\n        console.error(\"❌ Error in getCommentReplies:\", error);\n        return [];\n    }\n}\n// Get videos for a channel\nasync function getChannelVideos(channelId) {\n    try {\n        // Step 1: Get the internal UUID for this YouTube channel ID\n        const { data: channel } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"channels\").select(\"id\").eq(\"channel_id\", channelId).single();\n        if (!channel) {\n            console.log(\"Channel not found with ID:\", channelId);\n            return [];\n        }\n        console.log(\"Found channel, internal ID:\", channel.id);\n        // Step 2: Use the internal UUID to query videos\n        const { data: videos, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"videos\").select(\"*\").eq(\"channel_id\", channel.id); // Using internal UUID instead of YouTube channel ID\n        if (error) {\n            console.error(\"Error fetching videos:\", error);\n            throw error;\n        }\n        if (!videos || videos.length === 0) {\n            return [];\n        }\n        // Map DB videos to VideoData format\n        const videoData = videos.map((video)=>({\n                id: video.video_id,\n                title: video.title || \"Untitled Video\",\n                description: video.description || \"\",\n                publishedAt: video.published_at,\n                thumbnailUrl: video.thumbnail_url || \"\",\n                channelId: video.channel_id\n            }));\n        return videoData;\n    } catch (error) {\n        console.error(\"Error in getChannelVideos:\", error);\n        return [];\n    }\n}\n// Add this function to inspect a comment record\nfunction inspectComment(comment) {\n    console.log(\"Comment structure:\", {\n        id: comment.id,\n        comment_id: comment.comment_id,\n        video_id: comment.video_id,\n        parent_id: comment.parent_id,\n        channel_id: comment.channel_id\n    });\n}\n// Update the getCommentThreads function with additional debugging\nasync function getCommentThreads(channelId, videoId, page = 1, perPage = 20) {\n    try {\n        console.log(\"\\uD83D\\uDD0E getCommentThreads - Inputs:\", {\n            channelId,\n            videoId,\n            page,\n            perPage\n        });\n        // Step 1: Get the internal UUID for this YouTube channel ID\n        const { data: channel, error: channelError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"channels\").select(\"*\").eq(\"channel_id\", channelId).single();\n        if (channelError) {\n            console.error(\"❌ getCommentThreads - Error finding channel:\", channelError);\n            return [];\n        }\n        if (!channel) {\n            console.log(\"⚠️ getCommentThreads - Channel not found with ID:\", channelId);\n            return [];\n        }\n        console.log(\"✅ getCommentThreads - Found channel:\", {\n            internal_id: channel.id,\n            channel_id: channel.channel_id,\n            title: channel.title\n        });\n        // Step 2: Use the internal UUID to query comments\n        const startIdx = (page - 1) * perPage;\n        const endIdx = page * perPage - 1;\n        console.log(`🔢 getCommentThreads - Range: ${startIdx} to ${endIdx}`);\n        let query = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\").eq(\"channel_id\", channel.id).is(\"parent_id\", null) // Only get top-level comments\n        .order(\"published_at\", {\n            ascending: false\n        }).range(startIdx, endIdx);\n        if (videoId) {\n            query = query.eq(\"video_id\", videoId);\n        }\n        const { data: comments, error: commentsError } = await query;\n        if (commentsError) {\n            console.error(\"❌ getCommentThreads - Error fetching comments:\", commentsError);\n            return [];\n        }\n        console.log(`📊 getCommentThreads - Found ${comments?.length || 0} comments`);\n        if (!comments || comments.length === 0) {\n            return [];\n        }\n        // Sample the first comment to debug\n        if (comments.length > 0) {\n            console.log(\"\\uD83D\\uDD0D getCommentThreads - First comment:\", {\n                id: comments[0].id,\n                comment_id: comments[0].comment_id,\n                parent_id: comments[0].parent_id,\n                channel_id: comments[0].channel_id\n            });\n        }\n        // For each comment, count replies and map to CommentData format\n        const commentData = await Promise.all(comments.map(async (comment)=>{\n            // Count replies for this comment \n            const { count } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"parent_id\", comment.comment_id);\n            const replyCount = count || 0;\n            // Map DB comment to CommentData format with reply count\n            return {\n                ...mapDbCommentToCommentData(comment),\n                replyCount\n            };\n        }));\n        return commentData;\n    } catch (error) {\n        console.error(\"❌ getCommentThreads - Unhandled error:\", error);\n        return [];\n    }\n}\nasync function updateCommentReplyCounts() {\n    console.log(\"Updating reply counts for all comments...\");\n    try {\n        // For each comment with replies, count them and update the reply_count\n        const { data: comments } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"comment_id\").is(\"parent_id\", null);\n        if (!comments) return;\n        for (const comment of comments){\n            // Count the replies for this comment\n            const { count } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"parent_id\", comment.comment_id);\n            // Update the reply_count\n            if (count !== undefined) {\n                await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").update({\n                    reply_count: count\n                }).eq(\"comment_id\", comment.comment_id);\n            }\n        }\n        console.log(\"Reply counts updated successfully\");\n    } catch (error) {\n        console.error(\"Error updating reply counts:\", error);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/youtube.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/he","vendor-chunks/tailwind-merge","vendor-chunks/clsx"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcomment-replies%2Froute&page=%2Fapi%2Fcomment-replies%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcomment-replies%2Froute.ts&appDir=%2FUsers%2Fbrandoncullum%2Fcommenter%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbrandoncullum%2Fcommenter&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();