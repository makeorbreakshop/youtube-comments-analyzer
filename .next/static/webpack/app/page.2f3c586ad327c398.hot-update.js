"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/youtube.ts":
/*!************************!*\
  !*** ./lib/youtube.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchAllVideosByChannel: function() { return /* binding */ fetchAllVideosByChannel; },\n/* harmony export */   fetchComments: function() { return /* binding */ fetchComments; },\n/* harmony export */   fetchLatestChannelComments: function() { return /* binding */ fetchLatestChannelComments; },\n/* harmony export */   fetchVideosByChannel: function() { return /* binding */ fetchVideosByChannel; },\n/* harmony export */   getChannelVideos: function() { return /* binding */ getChannelVideos; },\n/* harmony export */   getCommentReplies: function() { return /* binding */ getCommentReplies; },\n/* harmony export */   getCommentThreads: function() { return /* binding */ getCommentThreads; },\n/* harmony export */   getCommentsForVideo: function() { return /* binding */ getCommentsForVideo; },\n/* harmony export */   mapDbCommentToCommentData: function() { return /* binding */ mapDbCommentToCommentData; },\n/* harmony export */   mapYouTubeCommentToDbComment: function() { return /* binding */ mapYouTubeCommentToDbComment; },\n/* harmony export */   searchForChannel: function() { return /* binding */ searchForChannel; },\n/* harmony export */   updateCommentReplyCounts: function() { return /* binding */ updateCommentReplyCounts; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./lib/utils.ts\");\n\n\n/**\n * YouTube API integration for fetching channel data and comments\n * Based on the YouTube Data API v3 documentation: \n * https://developers.google.com/youtube/v3/docs\n */ /**\n * Searches for a YouTube channel by name\n * @param channelName The name of the channel to search for\n * @param apiKey YouTube API key\n * @returns The channel ID\n */ async function searchForChannel(channelName, apiKey) {\n    const url = \"https://www.googleapis.com/youtube/v3/search?part=snippet&q=\".concat(encodeURIComponent(channelName), \"&type=channel&key=\").concat(apiKey);\n    const response = await fetch(url);\n    const data = await response.json();\n    if (!data.items || data.items.length === 0) {\n        throw new Error(\"Channel not found\");\n    }\n    return data.items[0].id.channelId;\n}\n/**\n * Fetches videos for a YouTube channel\n */ async function fetchVideosByChannel(channelId, apiKey) {\n    let maxResults = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 50, pageToken = arguments.length > 3 ? arguments[3] : void 0;\n    const url = \"https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=\".concat(channelId, \"&maxResults=\").concat(maxResults, \"&order=date&type=video&key=\").concat(apiKey).concat(pageToken ? \"&pageToken=\".concat(pageToken) : \"\");\n    const response = await fetch(url);\n    return await response.json();\n}\n/**\n * Fetches all videos for a YouTube channel with pagination\n */ async function fetchAllVideosByChannel(channelId, apiKey) {\n    let allVideos = [];\n    let nextPageToken;\n    do {\n        console.log(\"Fetching videos for channel \".concat(channelId).concat(nextPageToken ? \" (page token: \".concat(nextPageToken, \")\") : \"\"));\n        const response = await fetchVideosByChannel(channelId, apiKey, 50, nextPageToken);\n        allVideos = [\n            ...allVideos,\n            ...response.items || []\n        ];\n        nextPageToken = response.nextPageToken;\n        // Add a small delay to avoid API rate limits\n        if (nextPageToken) {\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n        }\n    }while (nextPageToken);\n    return allVideos;\n}\n/**\n * Fetches comments for a specific video\n */ async function fetchComments(videoId, apiKey, pageToken) {\n    try {\n        const url = \"https://www.googleapis.com/youtube/v3/commentThreads?part=snippet,replies&videoId=\".concat(videoId, \"&maxResults=100&key=\").concat(apiKey).concat(pageToken ? \"&pageToken=\".concat(pageToken) : \"\");\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch comments: \".concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n        throw error;\n    }\n}\n/**\n * Fetches the latest comments from a YouTube channel\n */ async function fetchLatestChannelComments(channelId, apiKey) {\n    let maxVideos = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10, includeOldVideos = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, maxComments = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1000, includeReplies = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;\n    // Fetch videos first\n    let videosResponse = await fetchVideosByChannel(channelId, apiKey);\n    let processedVideos = videosResponse.items || [];\n    // If we should include older videos beyond the first page\n    if (includeOldVideos && videosResponse.nextPageToken) {\n        const allVideos = await fetchAllVideosByChannel(channelId, apiKey);\n        processedVideos = allVideos;\n        // Limit to most recent videos\n        if (maxVideos !== -1) {\n            processedVideos = processedVideos.slice(0, maxVideos);\n        }\n    }\n    // Process each video to get comments\n    const allComments = [];\n    let fetchedCommentCount = 0;\n    for (const video of processedVideos){\n        // Skip if we've reached max comments\n        if (maxComments !== -1 && fetchedCommentCount >= maxComments) {\n            break;\n        }\n        try {\n            var _video_id;\n            // Fix: Ensure videoId is properly accessed\n            const videoId = (_video_id = video.id) === null || _video_id === void 0 ? void 0 : _video_id.videoId;\n            if (!videoId) {\n                console.warn(\"Missing videoId for video:\", video);\n                continue;\n            }\n            const commentsResponse = await fetchComments(videoId, apiKey);\n            // Process only top-level comments to start\n            const videoComments = commentsResponse.items || [];\n            for (const commentThread of videoComments){\n                var _commentThread_snippet_topLevelComment, _commentThread_snippet, _video_snippet, _commentThread_replies;\n                if (!(commentThread === null || commentThread === void 0 ? void 0 : (_commentThread_snippet = commentThread.snippet) === null || _commentThread_snippet === void 0 ? void 0 : (_commentThread_snippet_topLevelComment = _commentThread_snippet.topLevelComment) === null || _commentThread_snippet_topLevelComment === void 0 ? void 0 : _commentThread_snippet_topLevelComment.snippet)) {\n                    console.warn(\"Malformed comment thread:\", commentThread);\n                    continue;\n                }\n                const snippet = commentThread.snippet.topLevelComment.snippet;\n                // Add to our list\n                allComments.push({\n                    id: commentThread.id,\n                    videoId: videoId,\n                    videoTitle: ((_video_snippet = video.snippet) === null || _video_snippet === void 0 ? void 0 : _video_snippet.title) || \"Unknown Video\",\n                    authorName: snippet.authorDisplayName,\n                    authorProfileUrl: snippet.authorProfileImageUrl,\n                    text: snippet.textDisplay,\n                    likeCount: snippet.likeCount,\n                    publishedAt: snippet.publishedAt,\n                    updatedAt: snippet.updatedAt || snippet.publishedAt,\n                    totalReplyCount: commentThread.snippet.totalReplyCount || 0,\n                    replies: [] // Initialize empty array for replies\n                });\n                fetchedCommentCount++;\n                // Add replies if there are any and we want them\n                if (includeReplies && ((_commentThread_replies = commentThread.replies) === null || _commentThread_replies === void 0 ? void 0 : _commentThread_replies.comments)) {\n                    for (const reply of commentThread.replies.comments){\n                        var _video_snippet1;\n                        if (!(reply === null || reply === void 0 ? void 0 : reply.snippet)) {\n                            console.warn(\"Malformed reply:\", reply);\n                            continue;\n                        }\n                        allComments.push({\n                            id: reply.id,\n                            videoId: videoId,\n                            videoTitle: ((_video_snippet1 = video.snippet) === null || _video_snippet1 === void 0 ? void 0 : _video_snippet1.title) || \"Unknown Video\",\n                            authorName: reply.snippet.authorDisplayName,\n                            authorProfileUrl: reply.snippet.authorProfileImageUrl,\n                            text: reply.snippet.textDisplay,\n                            likeCount: reply.snippet.likeCount || 0,\n                            publishedAt: reply.snippet.publishedAt,\n                            updatedAt: reply.snippet.updatedAt || reply.snippet.publishedAt,\n                            totalReplyCount: 0,\n                            parentId: commentThread.id,\n                            replies: []\n                        });\n                        fetchedCommentCount++;\n                    }\n                }\n                // Check if we've reached the max\n                if (maxComments !== -1 && fetchedCommentCount >= maxComments) {\n                    break;\n                }\n            }\n        } catch (error) {\n            var _video_id1;\n            // Just log and continue with next video\n            console.error(\"Error fetching comments for video \".concat((_video_id1 = video.id) === null || _video_id1 === void 0 ? void 0 : _video_id1.videoId, \":\"), error);\n        }\n    }\n    return allComments;\n}\n/**\n * Get YouTube comments for a video\n */ async function getCommentsForVideo(videoId, apiKey) {\n    let maxComments = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : -1, includeReplies = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;\n    console.log(\"Getting comments for video \".concat(videoId, \", including replies: \").concat(includeReplies));\n    let comments = []; // Using Record<string, any> for flexibility\n    let nextPageToken;\n    let commentCount = 0;\n    do {\n        console.log(\"Fetching comments page \".concat(commentCount > 0 ? commentCount / 20 + 1 : 1));\n        const response = await fetchComments(videoId, apiKey, nextPageToken);\n        const videoComments = response.items || [];\n        // Process each top-level comment\n        for (const comment of videoComments){\n            var _comment_replies;\n            comments.push(comment);\n            commentCount++;\n            // Process replies if available and requested\n            if (includeReplies && ((_comment_replies = comment.replies) === null || _comment_replies === void 0 ? void 0 : _comment_replies.comments)) {\n                console.log(\"Found \".concat(comment.replies.comments.length, \" replies for comment \").concat(comment.id));\n                for (const reply of comment.replies.comments){\n                    // Ensure the reply has a properly formatted parent_id\n                    const replyComment = {\n                        ...reply,\n                        snippet: {\n                            ...reply.snippet,\n                            parentId: comment.id,\n                            videoId: videoId // Ensure videoId is included\n                        }\n                    };\n                    comments.push(replyComment);\n                    commentCount++;\n                }\n            }\n        }\n        nextPageToken = response.nextPageToken;\n        // Continue until we've reached max comments or run out of pages\n        if (maxComments !== -1 && commentCount >= maxComments) {\n            console.log(\"Reached maximum of \".concat(maxComments, \" comments\"));\n            break;\n        }\n        // Small delay to avoid rate limiting\n        if (nextPageToken) {\n            await new Promise((resolve)=>setTimeout(resolve, 300));\n        }\n    }while (nextPageToken);\n    console.log(\"Retrieved \".concat(comments.length, \" comments total\"));\n    return comments;\n}\n// Updated mapYouTubeCommentToDbComment function with more robust type checking\nfunction mapYouTubeCommentToDbComment(comment, channelId) {\n    var _comment_snippet, _comment_snippet_topLevelComment, _comment_snippet1, _comment_snippet2, _comment_snippet3, _comment_snippet_topLevelComment1, _comment_snippet4;\n    // Very explicitly extract parentId from all possible locations\n    let parentId = null;\n    // First check if it's in snippet.parentId\n    if ((_comment_snippet = comment.snippet) === null || _comment_snippet === void 0 ? void 0 : _comment_snippet.parentId) {\n        parentId = comment.snippet.parentId;\n        console.log(\"Found parentId in snippet.parentId: \".concat(parentId));\n    } else if (((_comment_snippet1 = comment.snippet) === null || _comment_snippet1 === void 0 ? void 0 : (_comment_snippet_topLevelComment = _comment_snippet1.topLevelComment) === null || _comment_snippet_topLevelComment === void 0 ? void 0 : _comment_snippet_topLevelComment.id) && comment.id !== comment.snippet.topLevelComment.id) {\n        parentId = comment.snippet.topLevelComment.id;\n        console.log(\"Found parentId from topLevelComment: \".concat(parentId));\n    }\n    // If this is a direct API reply, it might be structured differently\n    if (((_comment_snippet2 = comment.snippet) === null || _comment_snippet2 === void 0 ? void 0 : _comment_snippet2.type) === \"reply\" && ((_comment_snippet3 = comment.snippet) === null || _comment_snippet3 === void 0 ? void 0 : _comment_snippet3.parentId)) {\n        parentId = comment.snippet.parentId;\n        console.log(\"Found parentId from reply type: \".concat(parentId));\n    }\n    // Log mapping for debugging\n    console.log(\"Mapping comment \".concat(comment.id, \", parentId: \").concat(parentId || \"NONE (top-level)\"));\n    // Ensure we have proper access to all required properties\n    const topLevelSnippet = (_comment_snippet4 = comment.snippet) === null || _comment_snippet4 === void 0 ? void 0 : (_comment_snippet_topLevelComment1 = _comment_snippet4.topLevelComment) === null || _comment_snippet_topLevelComment1 === void 0 ? void 0 : _comment_snippet_topLevelComment1.snippet;\n    const directSnippet = comment.snippet;\n    return {\n        comment_id: comment.id,\n        video_id: directSnippet === null || directSnippet === void 0 ? void 0 : directSnippet.videoId,\n        author_name: (topLevelSnippet === null || topLevelSnippet === void 0 ? void 0 : topLevelSnippet.authorDisplayName) || (directSnippet === null || directSnippet === void 0 ? void 0 : directSnippet.authorDisplayName),\n        author_profile_url: (topLevelSnippet === null || topLevelSnippet === void 0 ? void 0 : topLevelSnippet.authorProfileImageUrl) || (directSnippet === null || directSnippet === void 0 ? void 0 : directSnippet.authorProfileImageUrl),\n        text: (topLevelSnippet === null || topLevelSnippet === void 0 ? void 0 : topLevelSnippet.textDisplay) || (directSnippet === null || directSnippet === void 0 ? void 0 : directSnippet.textDisplay),\n        like_count: (topLevelSnippet === null || topLevelSnippet === void 0 ? void 0 : topLevelSnippet.likeCount) || (directSnippet === null || directSnippet === void 0 ? void 0 : directSnippet.likeCount) || 0,\n        published_at: (topLevelSnippet === null || topLevelSnippet === void 0 ? void 0 : topLevelSnippet.publishedAt) || (directSnippet === null || directSnippet === void 0 ? void 0 : directSnippet.publishedAt),\n        channel_id: channelId,\n        is_owner_comment: false,\n        parent_id: parentId,\n        video_title: (directSnippet === null || directSnippet === void 0 ? void 0 : directSnippet.videoTitle) || \"\"\n    };\n}\n// Enhanced mapping function that handles all possible properties\nfunction mapDbCommentToCommentData(dbComment) {\n    return {\n        id: dbComment.comment_id,\n        authorDisplayName: dbComment.author_name || \"Unknown User\",\n        authorProfileImageUrl: dbComment.author_profile_url || \"https://www.gravatar.com/avatar/?d=mp\",\n        textDisplay: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.decodeAllHtmlEntities)(dbComment.text || \"\"),\n        likeCount: dbComment.like_count || 0,\n        publishedAt: dbComment.published_at,\n        updatedAt: dbComment.updated_at || dbComment.published_at,\n        videoId: dbComment.video_id,\n        videoTitle: dbComment.video_title || \"\",\n        replyCount: dbComment.reply_count || 0,\n        isHeartedByCreator: false,\n        isPinned: false,\n        parentId: dbComment.parent_id,\n        replies: [] // Will be populated separately if needed\n    };\n}\n// Debug function to inspect parent-child relationships in the database\nfunction logAllParentChildRelationships() {\n    return _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"comment_id, parent_id\").not(\"parent_id\", \"is\", null).limit(20).then((param)=>{\n        let { data, error } = param;\n        console.log(\"\\uD83D\\uDD0D PARENT-CHILD DEBUG - Sample comments with parents:\", data);\n        console.log(\"Error if any:\", error);\n        return data;\n    });\n}\n// Modified getCommentReplies function to fix reply lookup\nasync function getCommentReplies(commentId) {\n    try {\n        console.log(\"\\uD83D\\uDD0D getCommentReplies - Looking for replies to commentId:\", commentId);\n        // First, check if any comments in the database have parent_id matching our commentId\n        const { data: replyCheck, error: replyCheckError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"count(*)\").eq(\"parent_id\", commentId).single();\n        console.log(\"\\uD83D\\uDCCA getCommentReplies - Reply check result:\", replyCheck);\n        if (replyCheckError) {\n            console.error(\"❌ Reply check error:\", replyCheckError);\n        }\n        // Check the actual comment we're looking for replies to\n        const { data: parentComment, error: parentError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\").eq(\"comment_id\", commentId).single();\n        if (parentComment) {\n            var _parentComment_text;\n            console.log(\"✅ Found parent comment:\", {\n                id: parentComment.id,\n                comment_id: parentComment.comment_id,\n                video_id: parentComment.video_id,\n                text: ((_parentComment_text = parentComment.text) === null || _parentComment_text === void 0 ? void 0 : _parentComment_text.substring(0, 50)) + \"...\" || 0\n            });\n        } else {\n            console.log(\"⚠️ Parent comment not found for ID:\", commentId);\n        }\n        // Search for replies directly \n        const { data: replies, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\").eq(\"parent_id\", commentId) // This assumes parent_id references comment_id \n        .order(\"published_at\", {\n            ascending: true\n        });\n        if (error) {\n            console.error(\"❌ Error fetching replies:\", error);\n            return [];\n        }\n        console.log(\"\\uD83D\\uDCCA Found \".concat((replies === null || replies === void 0 ? void 0 : replies.length) || 0, \" replies for comment:\"), commentId);\n        if (replies && replies.length > 0) {\n            var _replies__text;\n            // Sample the first reply\n            console.log(\"\\uD83D\\uDD0D First reply sample:\", {\n                id: replies[0].id,\n                comment_id: replies[0].comment_id,\n                parent_id: replies[0].parent_id,\n                video_id: replies[0].video_id,\n                text: ((_replies__text = replies[0].text) === null || _replies__text === void 0 ? void 0 : _replies__text.substring(0, 50)) + \"...\" || 0\n            });\n        }\n        // Map to the expected format\n        const replyData = (replies === null || replies === void 0 ? void 0 : replies.map((reply)=>mapDbCommentToCommentData(reply))) || [];\n        return replyData;\n    } catch (error) {\n        console.error(\"❌ Error in getCommentReplies:\", error);\n        return [];\n    }\n}\n// Get videos for a channel\nasync function getChannelVideos(channelId) {\n    try {\n        // Step 1: Get the internal UUID for this YouTube channel ID\n        const { data: channel } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"channels\").select(\"id\").eq(\"channel_id\", channelId).single();\n        if (!channel) {\n            console.log(\"Channel not found with ID:\", channelId);\n            return [];\n        }\n        console.log(\"Found channel, internal ID:\", channel.id);\n        // Step 2: Use the internal UUID to query videos\n        const { data: videos, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"videos\").select(\"*\").eq(\"channel_id\", channel.id); // Using internal UUID instead of YouTube channel ID\n        if (error) {\n            console.error(\"Error fetching videos:\", error);\n            throw error;\n        }\n        if (!videos || videos.length === 0) {\n            return [];\n        }\n        // Map DB videos to VideoData format\n        const videoData = videos.map((video)=>({\n                id: video.video_id,\n                title: video.title || \"Untitled Video\",\n                description: video.description || \"\",\n                publishedAt: video.published_at,\n                thumbnailUrl: video.thumbnail_url || \"\",\n                channelId: video.channel_id\n            }));\n        return videoData;\n    } catch (error) {\n        console.error(\"Error in getChannelVideos:\", error);\n        return [];\n    }\n}\n// Add this function to inspect a comment record\nfunction inspectComment(comment) {\n    console.log(\"Comment structure:\", {\n        id: comment.id,\n        comment_id: comment.comment_id,\n        video_id: comment.video_id,\n        parent_id: comment.parent_id,\n        channel_id: comment.channel_id\n    });\n}\n// Update the getCommentThreads function with additional debugging\nasync function getCommentThreads(channelId, videoId) {\n    let page = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, perPage = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 20;\n    try {\n        console.log(\"\\uD83D\\uDD0E getCommentThreads - Inputs:\", {\n            channelId,\n            videoId,\n            page,\n            perPage\n        });\n        // Step 1: Get the internal UUID for this YouTube channel ID\n        const { data: channel, error: channelError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"channels\").select(\"*\").eq(\"channel_id\", channelId).single();\n        if (channelError) {\n            console.error(\"❌ getCommentThreads - Error finding channel:\", channelError);\n            return [];\n        }\n        if (!channel) {\n            console.log(\"⚠️ getCommentThreads - Channel not found with ID:\", channelId);\n            return [];\n        }\n        console.log(\"✅ getCommentThreads - Found channel:\", {\n            internal_id: channel.id,\n            channel_id: channel.channel_id,\n            title: channel.title\n        });\n        // Step 2: Use the internal UUID to query comments\n        const startIdx = (page - 1) * perPage;\n        const endIdx = page * perPage - 1;\n        console.log(\"\\uD83D\\uDD22 getCommentThreads - Range: \".concat(startIdx, \" to \").concat(endIdx));\n        let query = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\").eq(\"channel_id\", channel.id).is(\"parent_id\", null) // Only get top-level comments\n        .order(\"published_at\", {\n            ascending: false\n        }).range(startIdx, endIdx);\n        if (videoId) {\n            query = query.eq(\"video_id\", videoId);\n        }\n        const { data: comments, error: commentsError } = await query;\n        if (commentsError) {\n            console.error(\"❌ getCommentThreads - Error fetching comments:\", commentsError);\n            return [];\n        }\n        console.log(\"\\uD83D\\uDCCA getCommentThreads - Found \".concat((comments === null || comments === void 0 ? void 0 : comments.length) || 0, \" comments\"));\n        if (!comments || comments.length === 0) {\n            return [];\n        }\n        // Sample the first comment to debug\n        if (comments.length > 0) {\n            console.log(\"\\uD83D\\uDD0D getCommentThreads - First comment:\", {\n                id: comments[0].id,\n                comment_id: comments[0].comment_id,\n                parent_id: comments[0].parent_id,\n                channel_id: comments[0].channel_id\n            });\n        }\n        // For each comment, count replies and map to CommentData format\n        const commentData = await Promise.all(comments.map(async (comment)=>{\n            // Count replies for this comment \n            const { count } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"parent_id\", comment.comment_id);\n            const replyCount = count || 0;\n            // Map DB comment to CommentData format with reply count\n            return {\n                ...mapDbCommentToCommentData(comment),\n                replyCount\n            };\n        }));\n        return commentData;\n    } catch (error) {\n        console.error(\"❌ getCommentThreads - Unhandled error:\", error);\n        return [];\n    }\n}\nasync function updateCommentReplyCounts() {\n    console.log(\"Updating reply counts for all comments...\");\n    try {\n        // For each comment with replies, count them and update the reply_count\n        const { data: comments } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"comment_id\").is(\"parent_id\", null);\n        if (!comments) return;\n        for (const comment of comments){\n            // Count the replies for this comment\n            const { count } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").select(\"*\", {\n                count: \"exact\",\n                head: true\n            }).eq(\"parent_id\", comment.comment_id);\n            // Update the reply_count\n            if (count !== undefined) {\n                await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"comments\").update({\n                    reply_count: count\n                }).eq(\"comment_id\", comment.comment_id);\n            }\n        }\n        console.log(\"Reply counts updated successfully\");\n    } catch (error) {\n        console.error(\"Error updating reply counts:\", error);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/youtube.ts\n"));

/***/ })

});